---
title: "Section 1"
format:
  revealjs: 
    multiplex: true
    preview-links: auto
    logo: images/quarto.png
    css: styles.css
    gfm:
      mermaid-format: svg
---


## About Spotify

::: incremental

- 626 million active users globally.
- Over 100 million songs in the Spotify library.
- Detailed metadata for each song, including artist, album, release date, Beats per minute, danceability, valence, energy, liveness etc
- In our current project, we will explore the 2023 Spotify Dataset.
- This dataset contains 953 rows and 16 columns.
:::




## Dataset


```{r}
library(readr)
library(DT)
data_r <- read_csv("spotify2023.csv",show_col_types = FALSE)
datatable(data_r, options = list(scrollX = TRUE, scrollY = "150px"))
```

::: {.fragment .fade-in}

Let's understand the column one-by-one.

:::

## Column Explanation


::: {.fragment .fade-in-then-semi-out}

track_name: Name of the song
:::

::: {.fragment .fade-in-then-semi-out}

artist(s)_name: Name of the artist(s) of the song
:::

::: {.fragment .fade-in-then-semi-out}

artist_count: Number of artists contributing to the song
:::

::: {.fragment .fade-in-then-semi-out}

released_year: Year when the song was released
:::

::: {.fragment .fade-in-then-semi-out}

released_month: Month when the song was released

:::

::: {.fragment .fade-in-then-semi-out}

released_day: Day of the month when the song was released
:::

::: {.fragment .fade-in-then-semi-out}
streams: Total number of streams on Spotify
:::

::: {.fragment .fade-in-then-semi-out}
bpm: Beats per minute, a measure of song tempo
:::

::: {.fragment .fade-in-then-semi-out}

mode: Mode of the song (major or minor)
:::


## Column Explanation (cont.)

::: {.fragment .fade-in-then-semi-out}
danceability_%: Percentage indicating how suitable the song is for dancing
:::

::: {.fragment .fade-in-then-semi-out}
valence_%: Positivity of the song's musical content
:::

::: {.fragment .fade-in-then-semi-out}
energy_%: Perceived energy level of the song
:::

::: {.fragment .fade-in-then-semi-out}
acousticness_%: Amount of acoustic sound in the song
:::

::: {.fragment .fade-in-then-semi-out}
instrumentalness_%: Amount of instrumental content in the song
:::

::: {.fragment .fade-in-then-semi-out}
liveness_%: Presence of live performance elements
:::

::: {.fragment .fade-in-then-semi-out}
speechiness_%: Amount of spoken words in the song
:::


## Comment one

[fix comment for utteranc]{style="color:red;"}

Given this dataset, what are some questions that Spotify might ask to understand its users / improve its platform?

```{r}
library(readr)
library(DT)
data_r <- read_csv("spotify2023.csv",show_col_types = FALSE)
datatable(data_r, options = list(scrollX = TRUE, scrollY = "100px"))
```

<div class="utterances-comments">
{{< utterances-comments >}}
</div>


## Questions that Spotify might be interested in

::: incremental

- What are the top 5 songs in 2023? 
- What are the characteristics of the top 5 songs?
- What are the months and days that most songs are produced?
- What are the distributions of the audio features?
- What are the relationship between audio features?
- What are the different characteristics between the most and least-stream songs?

:::

# IT IS HARD TO ANSWER THOSE QUESTIONS BY JUST LOOKING AT IT

::: {.fragment .fade-in}

Therefore, we visualize the data to extract useful insights.
:::



## AI & Data 

::: columns
::: {.column width="40%"}

[fix the command]{style="color:red;"}

```{mermaid}
%%| fig-width: 3
flowchart LR
  Data (Round edge) --> AI (Round edge)
```

:::

::: {.column width="60%"}
::: {.fragment .fade-in}

Furthermore, AI relies on data. Understanding the data before feeding an algorithm is important.
:::
:::

:::



## Exploratory Data Analysis

::: {.fragment .fade-in-then-semi-out}
Exploratory Data Analysis (EDA) is the process of analyzing data sets to summarize their main characteristics, often using visual methods.
:::

::: {.fragment .fade-in-then-semi-out}
It’s a critical step in the data analysis workflow, providing insights into the structure, patterns, and relationships within the data.
:::


## Exploratory Data Analysis

::: incremental

- EDA helps you to **understand the nuances in your data**
- EDA helps **ensure the quality and reliability of your data**
- EDA is the **foundation** for complex analyses as it helps with features selection, hypothesis generation, and determining the research direction. 
:::

## Agenda

::: incremental
- Table Analysis
- Discrete Data Analysis
- Continuous Data Analysis
- Trend Analysis
- Relationship Analysis
:::


# (1) Table Analysis


## What are the top 5 songs based on stream in 2023?

```{r}
library(readr)
library(DT)
data_r <- read_csv("spotify2023.csv",show_col_types = FALSE)
datatable(data_r, options = list(scrollX = TRUE, scrollY = "200px"))
```


## What are the top 5 songs based on danceability in 2023?

```{r}
library(readr)
library(DT)
data_r <- read_csv("spotify2023.csv",show_col_types = FALSE)
datatable(data_r, options = list(scrollX = TRUE, scrollY = "200px"))
```

## What are the bottom 5 songs based on energy in 2023?

```{r}
library(readr)
library(DT)
data_r <- read_csv("spotify2023.csv",show_col_types = FALSE)
datatable(data_r, options = list(scrollX = TRUE, scrollY = "200px"))
```


# (2) Discrete Feature Analysis

## Discrete Feature

::: {.fragment .fade-in-then-semi-out}
Features that can only take in a specific set of values, often counted in whole number. For example, 
:::

::: incremental
- Coin flips: 0 or 1
- Days of the Week: Monday, Tuesday, Wednesday etc
- Class Grades: Students can receive specific grades like A, B, C, D, or F.
:::


## Bar Plot

::: {.fragment .fade-in-then-semi-out}
A bar plot is a chart that uses bars to represent the frequency or count of different categories of a discrete variable.
:::

::: {.fragment .fade-in-then-semi-out}
Bar plots are ideal for discrete variables because they clearly show the count or frequency of each category, making it easy to compare them.
:::

## Visualize

::: {.callout-tip appearance="simple"}
Select a categorical column to visualize:
```{ojs}
data = FileAttachment("spotify2023.csv").csv({ typed: true })
cat_columns = ['released_month', 'released_day','mode']
viewof selected_column_cat = Inputs.radio(cat_columns, {value: cat_columns[0]})
```
:::


```{ojs}
grouped_data = d3.groups(data, d => d[selected_column_cat]).map(([key, values]) => ({key, count: values.length}));

Plot.plot({
  marks: [
    Plot.barY(grouped_data, {x: "key", y: "count", fill: "steelblue"}),
    Plot.text(grouped_data, {x: "key", y: "count", text: d => d.count, dy: -10})
  ],
  x: {
    label: selected_column_cat
  },
  y: {
    label: "Count"
  },
  color: {
    legend: false
  }
})
```

## Comment two

[fix comment for utteranc]{style="color:red;"}

<div class="utterances-comments">
{{< utterances-comments >}}
</div>


# (3) Continuous Feature Analysis

## Continuous Feature

::: {.fragment .fade-in-then-semi-out}
Features that can take any value within a given range, often measured and including fractions or decimals.
:::

::: incremental
- Height: A person’s height can be any value within a range (e.g., 150.5 cm, 170.2 cm).
- Temperature: Temperature can vary continuously (e.g., 22.3°C, 35.6°C).
- Weight: Weight can take on any value within a range (e.g., 55.5 kg, 72.8 kg).
:::

## Histogram

::: {.fragment .fade-in-then-semi-out}
A histogram is a chart that uses bars to represent the distribution of a continuous variable, showing the frequency of data within certain ranges or bins.
:::

::: {.fragment .fade-in-then-semi-out}
Histogram makes it easier to identify patterns, such as skewness, central tendency, and the presence of outliers.
:::

## Visualize


## Comment three

[fix comment for utteranc]{style="color:red;"}

<div class="utterances-comments">
{{< utterances-comments >}}
</div>

## And More...

-   [Touch](https://quarto.org/docs/presentations/revealjs/advanced.html#touch-navigation) optimized (presentations look great on mobile, swipe to navigate slides)
-   [Footer & Logo](https://quarto.org/docs/presentations/revealjs/#footer-logo) (optionally specify custom footer per-slide)
-   [Auto-Slide](https://quarto.org/docs/presentations/revealjs/presenting.html#auto-slide) (step through slides automatically, without any user input)
-   [Multiplex](https://quarto.org/docs/presentations/revealjs/presenting.html#multiplex) (allows your audience to follow the slides of the presentation you are controlling on their own phone, tablet or laptop).

::: footer
Learn more: [Quarto Presentations](https://quarto.org/docs/presentations/revealjs/)
:::